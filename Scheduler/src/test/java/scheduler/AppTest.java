/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package scheduler;
import java.io.IOException;
import java.util.ArrayList;
import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test public void testAppOnInput1() throws IOException{
        Parser parser = new Parser();

        testParserHelperFunctions(parser);

        try{
            
            parser.parseFile("sample_input.txt");

            Problem problem = parser.getProblem();

            testSample1(problem);

        }catch(IOException exception){
            throw(exception);
        }
    }

    public static void testParserHelperFunctions(Parser parser){

        


    }

    public static void testSample1(Problem problem){

        ArrayList<Slot> courseSlots = problem.getCourseSlots();

        ArrayList<Slot> labSlots = problem.getLabSlots();

        ArrayList<Course> courses = problem.getCourses();

        ArrayList<Lab> labs = problem.getLabs();
        assertEquals("Number of course slots: ", 3, courseSlots.size());

        testSlot(courseSlots.get(0), "MO", "8:00", 3,2);
        testSlot(courseSlots.get(1), "MO", "9:00", 3,2);
        testSlot(courseSlots.get(2), "TU", "9:30", 2,1);

        assertEquals("Number of lab slots: ", 3, labSlots.size());

        testSlot(labSlots.get(0), "MO", "8:00", 4, 2); 
        testSlot(labSlots.get(1), "TU", "10:00", 2, 1); 
        testSlot(labSlots.get(2), "FR", "10:00", 2, 1); 

        assertEquals("Number of courses: ", 4, courses.size());

        testCourse(courses.get(0),"CPSC 433","LEC 01");
        testCourse(courses.get(1), "CPSC 433", "LEC 02");
        testCourse(courses.get(2), "SENG 311", "LEC 01");
        testCourse(courses.get(3), "CPSC 567", "LEC 01");

        assertEquals("Number of labs: ", 4, labs.size());

        testLab(labs.get(0), "CPSC 433", "LEC 01", "TUT", "01");
        testLab(labs.get(1), "CPSC 433", "LEC 02", "LAB", "02");
        testLab(labs.get(2), "SENG 311", "LEC 01", "TUT", "01");
        testLab(labs.get(3), "CPSC 567", null , "TUT", "01");

        testUnwantedSlot(problem.getCourse("CPSC 433", "LEC 01").getUnwantedSlots().get(0), "MO", "8:00");

        testPreferences(problem.getCourse("CPSC 433", "LEC 02").getPreferences().get(0), 10, "TU", "9:30");

        testPaired(problem.getCourse("SENG 311", "LEC 01").getPaired().get(0), "CPSC 567");
        testPaired(problem.getCourse("CPSC 567", "LEC 01").getPaired().get(0), "SENG 311");

    }

    public static void testSlot(Slot slot, String day, String startTime, Integer courseMax, Integer courseMin){
        
        assertEquals("day: ", day, slot.getDay());
        assertEquals("start time: ", startTime, slot.getStartTime());
        assertEquals("course max: ", courseMax, slot.getCourseMax());
        assertEquals("course min: ", courseMin, slot.getCourseMin());
        
    }



    public static void testCourse(Course course, String courseIdentifier, String courseSection){

        assertEquals("course identifier: ", courseIdentifier, course.getCourseIdentifier());
        assertEquals("course section: ", courseSection, courseSection);
    }

    public static void testLab(Lab lab, String courseIdentifier , String courseSection, String labType, String labSection){

        assertEquals("Course identifier: ", courseIdentifier, lab.getCourseIdentifier());

        if(lab instanceof ExclusiveLab){
            assertEquals("Course section: ", courseSection, ((ExclusiveLab) lab).getCourseSection());
        }

        assertEquals("lab type: ", labType, lab.getLabType());
        assertEquals("lab section: ", labSection, lab.getLabSection());
    }

    public static void testUnwantedSlot(Slot slot, String day, String startTime){
        assertEquals("Day: ", day, slot.getDay());
        assertEquals("Start Time: ", startTime, slot.getStartTime());
    }

    public static void testPreferences(Preference preference, int weight, String slotDay, String slotStartTime){
        assertEquals("weight: ", weight, preference.getWeight());
        assertEquals("day: ", slotDay, preference.getPreferedSlot().getDay());
        assertEquals("start time: ", slotStartTime, preference.getPreferedSlot().getStartTime());
    }


    public static void testPaired(SlotBooking booking, String courseIdentifier){
        assertEquals("Course Identifier: ", booking.getCourseIdentifier(), courseIdentifier);
    }

    


}
